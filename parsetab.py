
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA EQUAL IDENTIFIER LBRACE LPAREN NUMBER PLUS RBRACE RESERVED RPAREN SEMICOLON STRING VARIABLEprogram : RESERVED IDENTIFIER LPAREN RPAREN LBRACE block RBRACEblock : statement block\n             | statementdeclaration : RESERVED identifier_list SEMICOLONread_statement : RESERVED VARIABLE SEMICOLONprintf_statement : RESERVED LPAREN STRING RPAREN SEMICOLONend_statement : RESERVED SEMICOLONassignment_statement : VARIABLE EQUAL expression SEMICOLONexpression : VARIABLE PLUS VARIABLE\n                  | NUMBER PLUS NUMBER\n                  | VARIABLE PLUS NUMBER\n                  | NUMBER PLUS VARIABLEidentifier_list : VARIABLE\n                       | VARIABLE COMMA identifier_liststatement : declaration\n                 | read_statement\n                 | printf_statement\n                 | end_statement\n                 | assignment_statement'
    
_lr_action_items = {'RESERVED':([0,6,9,10,11,12,13,14,17,23,24,34,36,],[2,7,7,-15,-16,-17,-18,-19,-7,-4,-5,-8,-6,]),'$end':([1,20,],[0,-1,]),'IDENTIFIER':([2,],[3,]),'LPAREN':([3,7,],[4,19,]),'RPAREN':([4,26,],[5,32,]),'LBRACE':([5,],[6,]),'VARIABLE':([6,7,9,10,11,12,13,14,17,22,23,24,25,33,34,35,36,],[15,18,15,-15,-16,-17,-18,-19,-7,27,-4,-5,30,37,-8,40,-6,]),'SEMICOLON':([7,16,18,28,30,31,32,37,38,39,40,],[17,23,24,34,-13,-14,36,-9,-11,-10,-12,]),'RBRACE':([8,9,10,11,12,13,14,17,21,23,24,34,36,],[20,-3,-15,-16,-17,-18,-19,-7,-2,-4,-5,-8,-6,]),'EQUAL':([15,],[22,]),'COMMA':([18,30,],[25,25,]),'STRING':([19,],[26,]),'NUMBER':([22,33,35,],[29,38,39,]),'PLUS':([27,29,],[33,35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([6,9,],[8,21,]),'statement':([6,9,],[9,9,]),'declaration':([6,9,],[10,10,]),'read_statement':([6,9,],[11,11,]),'printf_statement':([6,9,],[12,12,]),'end_statement':([6,9,],[13,13,]),'assignment_statement':([6,9,],[14,14,]),'identifier_list':([7,25,],[16,31,]),'expression':([22,],[28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> RESERVED IDENTIFIER LPAREN RPAREN LBRACE block RBRACE','program',7,'p_program','app.py',77),
  ('block -> statement block','block',2,'p_block','app.py',81),
  ('block -> statement','block',1,'p_block','app.py',82),
  ('declaration -> RESERVED identifier_list SEMICOLON','declaration',3,'p_declaration','app.py',89),
  ('read_statement -> RESERVED VARIABLE SEMICOLON','read_statement',3,'p_read_statement','app.py',93),
  ('printf_statement -> RESERVED LPAREN STRING RPAREN SEMICOLON','printf_statement',5,'p_printf_statement','app.py',97),
  ('end_statement -> RESERVED SEMICOLON','end_statement',2,'p_end_statement','app.py',101),
  ('assignment_statement -> VARIABLE EQUAL expression SEMICOLON','assignment_statement',4,'p_assignment_statement','app.py',105),
  ('expression -> VARIABLE PLUS VARIABLE','expression',3,'p_expression','app.py',109),
  ('expression -> NUMBER PLUS NUMBER','expression',3,'p_expression','app.py',110),
  ('expression -> VARIABLE PLUS NUMBER','expression',3,'p_expression','app.py',111),
  ('expression -> NUMBER PLUS VARIABLE','expression',3,'p_expression','app.py',112),
  ('identifier_list -> VARIABLE','identifier_list',1,'p_identifier_list','app.py',116),
  ('identifier_list -> VARIABLE COMMA identifier_list','identifier_list',3,'p_identifier_list','app.py',117),
  ('statement -> declaration','statement',1,'p_statement','app.py',124),
  ('statement -> read_statement','statement',1,'p_statement','app.py',125),
  ('statement -> printf_statement','statement',1,'p_statement','app.py',126),
  ('statement -> end_statement','statement',1,'p_statement','app.py',127),
  ('statement -> assignment_statement','statement',1,'p_statement','app.py',128),
]
